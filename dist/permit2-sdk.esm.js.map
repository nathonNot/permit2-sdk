{"version":3,"file":"permit2-sdk.esm.js","sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\n\r\nexport const PERMIT2_ADDRESS = '0x3EA312569078c754cf907623A434589b3ac15D2A'\r\n\r\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\r\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\r\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// alias max types for their usages\r\n// allowance transfer types\r\nexport const MaxAllowanceTransferAmount = MaxUint160\r\nexport const MaxAllowanceExpiration = MaxUint48\r\nexport const MaxOrderedNonce = MaxUint48\r\n\r\n// signature transfer types\r\nexport const MaxSignatureTransferAmount = MaxUint256\r\nexport const MaxUnorderedNonce = MaxUint256\r\nexport const MaxSigDeadline = MaxUint256\r\n\r\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\r\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\r\n\r\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\r\n\r\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\r\n  return {\r\n    name: PERMIT2_DOMAIN_NAME,\r\n    chainId,\r\n    verifyingContract: permit2Address,\r\n  }\r\n}\r\n\r\nexport type PermitData = {\r\n  domain: TypedDataDomain\r\n  types: Record<string, TypedDataField[]>\r\n  values: any\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\r\nimport { BigNumberish } from '@ethersproject/bignumber'\r\nimport { _TypedDataEncoder } from '@ethersproject/hash'\r\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\r\nimport { permit2Domain } from './domain'\r\n\r\nexport interface PermitDetails {\r\n  token: string\r\n  amount: BigNumberish\r\n  expiration: BigNumberish\r\n  nonce: BigNumberish\r\n}\r\n\r\nexport interface PermitSingle {\r\n  details: PermitDetails\r\n  spender: string\r\n  sigDeadline: BigNumberish\r\n}\r\n\r\nexport interface PermitBatch {\r\n  details: PermitDetails[]\r\n  spender: string\r\n  sigDeadline: BigNumberish\r\n}\r\n\r\nexport type PermitSingleData = {\r\n  domain: TypedDataDomain\r\n  types: Record<string, TypedDataField[]>\r\n  values: PermitSingle\r\n}\r\n\r\nexport type PermitBatchData = {\r\n  domain: TypedDataDomain\r\n  types: Record<string, TypedDataField[]>\r\n  values: PermitBatch\r\n}\r\n\r\nconst PERMIT_DETAILS = [\r\n  { name: 'token', type: 'address' },\r\n  { name: 'amount', type: 'uint160' },\r\n  { name: 'expiration', type: 'uint48' },\r\n  { name: 'nonce', type: 'uint48' },\r\n]\r\n\r\nconst PERMIT_TYPES = {\r\n  PermitSingle: [\r\n    { name: 'details', type: 'PermitDetails' },\r\n    { name: 'spender', type: 'address' },\r\n    { name: 'sigDeadline', type: 'uint256' },\r\n  ],\r\n  PermitDetails: PERMIT_DETAILS,\r\n}\r\n\r\nconst PERMIT_BATCH_TYPES = {\r\n  PermitBatch: [\r\n    { name: 'details', type: 'PermitDetails[]' },\r\n    { name: 'spender', type: 'address' },\r\n    { name: 'sigDeadline', type: 'uint256' },\r\n  ],\r\n  PermitDetails: PERMIT_DETAILS,\r\n}\r\n\r\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\r\n  return !Array.isArray(permit.details)\r\n}\r\n\r\nexport abstract class AllowanceTransfer {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  // return the data to be sent in a eth_signTypedData RPC call\r\n  // for signing the given permit data\r\n  public static getPermitData(\r\n    permit: PermitSingle | PermitBatch,\r\n    permit2Address: string,\r\n    chainId: number\r\n  ): PermitSingleData | PermitBatchData {\r\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\r\n\r\n    const domain = permit2Domain(permit2Address, chainId)\r\n    if (isPermit(permit)) {\r\n      validatePermitDetails(permit.details)\r\n      return {\r\n        domain,\r\n        types: PERMIT_TYPES,\r\n        values: permit,\r\n      }\r\n    } else {\r\n      permit.details.forEach(validatePermitDetails)\r\n      return {\r\n        domain,\r\n        types: PERMIT_BATCH_TYPES,\r\n        values: permit,\r\n      }\r\n    }\r\n  }\r\n\r\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\r\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\r\n    return _TypedDataEncoder.hash(domain, types, values)\r\n  }\r\n}\r\n\r\nfunction validatePermitDetails(details: PermitDetails) {\r\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\r\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\r\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\r\nimport { BigNumberish } from '@ethersproject/bignumber'\r\nimport { _TypedDataEncoder } from '@ethersproject/hash'\r\nimport { permit2Domain } from './domain'\r\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\r\n\r\nexport interface Witness {\r\n  witness: any\r\n  witnessTypeName: string\r\n  witnessType: Record<string, TypedDataField[]>\r\n}\r\n\r\nexport interface TokenPermissions {\r\n  token: string\r\n  amount: BigNumberish\r\n}\r\n\r\nexport interface PermitTransferFrom {\r\n  permitted: TokenPermissions\r\n  spender: string\r\n  nonce: BigNumberish\r\n  deadline: BigNumberish\r\n}\r\n\r\nexport interface PermitBatchTransferFrom {\r\n  permitted: TokenPermissions[]\r\n  spender: string\r\n  nonce: BigNumberish\r\n  deadline: BigNumberish\r\n}\r\n\r\nexport type PermitTransferFromData = {\r\n  domain: TypedDataDomain\r\n  types: Record<string, TypedDataField[]>\r\n  values: PermitTransferFrom\r\n}\r\n\r\nexport type PermitBatchTransferFromData = {\r\n  domain: TypedDataDomain\r\n  types: Record<string, TypedDataField[]>\r\n  values: PermitBatchTransferFrom\r\n}\r\n\r\nconst TOKEN_PERMISSIONS = [\r\n  { name: 'token', type: 'address' },\r\n  { name: 'amount', type: 'uint256' },\r\n]\r\n\r\nconst PERMIT_TRANSFER_FROM_TYPES = {\r\n  PermitTransferFrom: [\r\n    { name: 'permitted', type: 'TokenPermissions' },\r\n    { name: 'spender', type: 'address' },\r\n    { name: 'nonce', type: 'uint256' },\r\n    { name: 'deadline', type: 'uint256' },\r\n  ],\r\n  TokenPermissions: TOKEN_PERMISSIONS,\r\n}\r\n\r\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\r\n  PermitBatchTransferFrom: [\r\n    { name: 'permitted', type: 'TokenPermissions[]' },\r\n    { name: 'spender', type: 'address' },\r\n    { name: 'nonce', type: 'uint256' },\r\n    { name: 'deadline', type: 'uint256' },\r\n  ],\r\n  TokenPermissions: TOKEN_PERMISSIONS,\r\n}\r\n\r\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\r\n  return {\r\n    PermitWitnessTransferFrom: [\r\n      { name: 'permitted', type: 'TokenPermissions' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n      { name: 'witness', type: witness.witnessTypeName },\r\n    ],\r\n    TokenPermissions: TOKEN_PERMISSIONS,\r\n    ...witness.witnessType,\r\n  }\r\n}\r\n\r\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\r\n  return {\r\n    PermitBatchWitnessTransferFrom: [\r\n      { name: 'permitted', type: 'TokenPermissions[]' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' },\r\n      { name: 'witness', type: witness.witnessTypeName },\r\n    ],\r\n    TokenPermissions: TOKEN_PERMISSIONS,\r\n    ...witness.witnessType,\r\n  }\r\n}\r\n\r\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\r\n  return !Array.isArray(permit.permitted)\r\n}\r\n\r\nexport abstract class SignatureTransfer {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  // return the data to be sent in a eth_signTypedData RPC call\r\n  // for signing the given permit data\r\n  public static getPermitData(\r\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\r\n    permit2Address: string,\r\n    chainId: number,\r\n    witness?: Witness\r\n  ): PermitTransferFromData | PermitBatchTransferFromData {\r\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\r\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\r\n\r\n    const domain = permit2Domain(permit2Address, chainId)\r\n    if (isPermitTransferFrom(permit)) {\r\n      validateTokenPermissions(permit.permitted)\r\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\r\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\r\n      return {\r\n        domain,\r\n        types,\r\n        values,\r\n      }\r\n    } else {\r\n      permit.permitted.forEach(validateTokenPermissions)\r\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\r\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\r\n      return {\r\n        domain,\r\n        types,\r\n        values,\r\n      }\r\n    }\r\n  }\r\n\r\n  public static hash(\r\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\r\n    permit2Address: string,\r\n    chainId: number,\r\n    witness?: Witness\r\n  ): string {\r\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\r\n    return _TypedDataEncoder.hash(domain, types, values)\r\n  }\r\n}\r\n\r\nfunction validateTokenPermissions(permissions: TokenPermissions) {\r\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Provider } from '@ethersproject/providers'\r\nimport Permit2Abi from '../../abis/Permit2.json'\r\nimport { Contract } from '@ethersproject/contracts'\r\n\r\nexport interface AllowanceData {\r\n  amount: BigNumber\r\n  nonce: number\r\n  expiration: number\r\n}\r\n\r\nexport class AllowanceProvider {\r\n  private permit2: Contract\r\n\r\n  constructor(private provider: Provider, private permit2Address: string) {\r\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\r\n  }\r\n\r\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\r\n    return await this.permit2.allowance(owner, token, spender)\r\n  }\r\n\r\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\r\n    return (await this.getAllowanceData(token, owner, spender)).amount\r\n  }\r\n\r\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\r\n    return (await this.getAllowanceData(token, owner, spender)).nonce\r\n  }\r\n\r\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\r\n    return (await this.getAllowanceData(token, owner, spender)).expiration\r\n  }\r\n}\r\n"],"names":["PERMIT2_ADDRESS","MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","PERMIT2_DOMAIN_NAME","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","isPermit","permit","Array","isArray","details","AllowanceTransfer","getPermitData","gte","sigDeadline","invariant","domain","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","permitTransferFromWithWitnessType","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","permitBatchTransferFromWithWitnessType","PermitBatchWitnessTransferFrom","isPermitTransferFrom","permitted","SignatureTransfer","deadline","validateTokenPermissions","Object","assign","permissions","AllowanceProvider","provider","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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"}